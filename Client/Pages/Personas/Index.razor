@page "/indice-personas"
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Personas</h3>

<div>
    <a class="btn btn-success" href="crear-persona">Nueva Persona</a>
</div>

@if (personas==null) {
    <text>Cargando...</text>
}
else if (personas.Length==0) {
    <text>No hay Personas en la base de datos</text>
}
else {
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Nombre</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var persona in personas){
                <tr>
                    <td>
                        <a class="btn btn-success" href="editar-persona/@persona.Id">Editar</a>
                        <button class="btn btn-danger" @onclick="@(()=> BorrarPersona(persona.Id))">Borrar</button>
                    </td>
                    <td>@persona.Id</td>
                    <td>@persona.Nombre</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    Persona[] personas {get; set;}

    protected override async Task OnInitializedAsync()
    {
        await CargarPersonas();
    }

    async Task CargarPersonas(){
        personas = await Http.GetFromJsonAsync<Persona[]>("Personas");  //personasController
    }

    async Task BorrarPersona(int idPersona)
    {
        var personaSeleccionada = personas.First(x => x.Id == idPersona);
        string mensaje = $"Deseas Borrar a la persona {personaSeleccionada.Nombre}?";
        if (await JS.Confirmar("Confirmar", mensaje, JSextensions.TipoMensajeSweetAlert.question))   //javascript
        {
            await Http.DeleteAsync($"personas/{idPersona}");
            await CargarPersonas();
        }
    }
}
