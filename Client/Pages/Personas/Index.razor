@page "/indice-personas"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.IO

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json;

@inject HttpClient Http
@inject IJSRuntime JS

<h3>Personas</h3>

<AuthorizeView>
    <Authorized>
        <div class="form-group">
            <a class="btn btn-success" href="crear-persona">Nueva Persona</a>
        </div>
    </Authorized>
</AuthorizeView>

<div class="form-inline">
    <label class="sr-only" for="nombre-filtro">Filtrar</label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="nombrePersonaFiltro" placeholder="Filtrar por Nombre" />
    <button type="button" class="btn btn-primary mr-sm-2 mb-2"
            @onclick="Filtrar">
        Filtrar
    </button>
    <button type="button" class="btn btn-danger mb-2"
            @onclick="Limpiar">
        Limpiar
    </button>

</div>

<Paginacion PaginasTotales="paginasTotales" PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>

@if (personas==null) {
    <text>Cargando...</text>
}
else if (personas.Count==0) {
    <text>No hay Personas en la base de datos</text>
}
else {
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Nombre</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var persona in personas){
                <tr>
                    <td>
                        <AuthorizeView>
                            <Authorized>
                                <a class="btn btn-success" href="editar-persona/@persona.Id">Editar</a>
                                <button class="btn btn-danger" @onclick="@(() => BorrarPersona(persona.Id))">Borrar</button>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                    <td>@persona.Id</td>
                    <td>@persona.Nombre</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Persona> personas {get; set;}

    private int paginaActual = 1;
    private int paginasTotales;
    private string nombrePersonaFiltro = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarPersonas();
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarPersonas(pagina);
    }

    private async Task Filtrar()
    {
        paginaActual = 1;
        await CargarPersonas();
    }

    private async Task Limpiar()
    {
        nombrePersonaFiltro = string.Empty;
        paginaActual = 1;
        await CargarPersonas();
    }

    async Task CargarPersonas(int pagina = 1, int cantidadRegistrosAMostrar = 10)
    {
        string buscar = "";
        if (!string.IsNullOrWhiteSpace(nombrePersonaFiltro))
           buscar = $"personas?pagina={pagina}&CantidadAMostrar={cantidadRegistrosAMostrar}&nombre={nombrePersonaFiltro}";
        else
            buscar = $"personas?pagina={pagina}&CantidadAMostrar={cantidadRegistrosAMostrar}&nombre=null";
        
            var httpResponse = await Http.GetAsync(buscar);
        if (httpResponse.IsSuccessStatusCode)
        {
            paginasTotales = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responseString = await httpResponse.Content.ReadAsStringAsync();
            personas = JsonSerializer.Deserialize<List<Persona>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
    }

    async Task BorrarPersona(int idPersona)
    {
        var personaSeleccionada = personas.First(x => x.Id == idPersona);
        string mensaje = $"Deseas Borrar a la persona {personaSeleccionada.Nombre}?";
        if (await JS.Confirmar("Confirmar", mensaje, JSextensions.TipoMensajeSweetAlert.question))   //javascript
        {
            await Http.DeleteAsync($"personas/{idPersona}");
            await CargarPersonas();
        }
    }
}
